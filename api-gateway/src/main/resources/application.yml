## Hybrid YAML-Properties Template
---

# ================================
# ‚úÖ Basic Server Configuration
# ================================
server.port: 7000 # Port on which the API Gateway server runs

# ================================
# ‚úÖ Logging Configuration
# ================================
logging.level.root: INFO # Base logging level
logging.level.org.springframework.security: DEBUG # Log security-related events (disable in prod)
logging.level.org.springframework.cloud.gateway: DEBUG # Logs gateway routing (disable in prod)
logging.level.reactor.netty: INFO # Log level for Netty HTTP client/server

# ================================
# ‚úÖ Truststore (SSL) Configuration
# ================================
truststore.path: classpath:backend_truststore.p12 # Path to SSL truststore file
truststore.password: ${truststore.password} # Password for truststore (externalized)

# ================================
# ‚úÖ Spring Boot Main Settings
# ================================
spring.main.web-application-type: REACTIVE # Must be REACTIVE for Spring Cloud Gateway
spring.application.name: api-gateway # Used for Eureka service registration
spring.autoconfigure.exclude[0]: org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration # Disable R2DBC autoconfig

# ================================
# ‚úÖ Redis Configuration (Rate Limiting, etc.)
# ================================
spring.data.redis.host: localhost # Redis host (can be remote)
spring.data.redis.port: 6379 # Redis port
#spring.data.redis.password: ${redis.password} # Optional: Redis auth (commented out)

# ================================
# ‚úÖ Vault Configuration (for secrets)
# ================================
spring.config.import: "vault://secret/aliwudi-marketplace" # Import externalized config from Vault

# Vault Configuration
spring.cloud.vault.uri: http://127.0.0.1:8200
spring.cloud.vault.authentication: APPROLE
spring.cloud.vault.app-role.role-id: ${VAULT_ROLE_ID}
spring.cloud.vault.app-role.secret-id: ${VAULT_SECRET_ID}
spring.cloud.vault.app-role.role: aliwudi-marketplace-role
spring.cloud.vault.app-role.app-role-path: approle

# ================================
# ‚úÖ Service Discovery Configuration (Eureka)
# ================================
spring.cloud.gateway.discovery.locator.enabled: true # Discover routes automatically using Eureka
spring.cloud.gateway.discovery.locator.lower-case-service-id: true # Convert service IDs to lowercase for consistency

# ================================
# ‚úÖ Gateway HTTP Client Timeouts
# ================================
spring.cloud.gateway.httpclient.connect-timeout: 10000 # Connection timeout (in ms)
spring.cloud.gateway.httpclient.response-timeout: 30s # Total response timeout

# ================================
# ‚úÖ OAuth2 JWT Validation Configuration
# ================================
spring.security.oauth2.resourceserver.jwt.jwk-set-uri: https://localhost:8443/realms/chuks-emaketplace-realm/protocol/openid-connect/certs
# URI from which to fetch public keys for validating JWT tokens

# ================================
# ‚úÖ Eureka Server Location
# ================================
eureka.client.service-url.defaultZone: http://localhost:8761/eureka/ # Eureka server URL
eureka.instance.hostname: localhost # Hostname for this service instance

# ================================
# ‚úÖ Actuator and Tracing Settings
# ================================
management.endpoints.web.exposure.include: "*" # Expose all actuator endpoints (restrict in prod)
management.metrics.export.prometheus.enabled: true # Enable Prometheus metrics endpoint
management.tracing.enabled: false # Disable distributed tracing (Zipkin)
management.tracing.sampling.probability: 1.0 # 100% sampling for development
management.tracing.service.name: api-gateway # Service name shown in tracing tools
management.tracing.zipkin.sender.type: http # Send traces via HTTP
management.tracing.zipkin.sender.base-url: http://localhost:9411 # Zipkin server endpoint

# ================================
# ‚úÖ Resilience4j TimeLimiter Settings
# ================================
resilience4j.timelimiter.instances.default.timeout-duration: 30s # Default timeout per call
resilience4j.timelimiter.instances.default.cancel-running-future: true # Cancel slow operations
resilience4j.timelimiter.instances.userCircuitBreaker.timeout-duration: 40s # Specific timeout for user service
resilience4j.timelimiter.instances.userCircuitBreaker.cancel-running-future: true

# ================================
# ‚úÖ Resilience4j CircuitBreaker Settings
# ================================
resilience4j.circuitbreaker.instances.default.sliding-window-size: 10 # Evaluate last 10 calls
resilience4j.circuitbreaker.instances.default.failure-rate-threshold: 50 # 50% failure rate to open circuit
resilience4j.circuitbreaker.instances.default.wait-duration-in-open-state: 60s # Wait time before retry
resilience4j.circuitbreaker.instances.default.permitted-number-of-calls-in-half-open-state: 3 # Test requests allowed

resilience4j.circuitbreaker.instances.userCircuitBreaker.sliding-window-size: 20
resilience4j.circuitbreaker.instances.userCircuitBreaker.failure-rate-threshold: 70
resilience4j.circuitbreaker.instances.userCircuitBreaker.wait-duration-in-open-state: 30s

# ================================
# ‚úÖ JWT Claims Conversion Settings
# ================================
jwt.auth.converter.resource-id: emaketplace-app # Resource ID in the access token
jwt.auth.converter.principle-attribute: preferred_username # Use this claim as principal identity

# ================================
# ‚úÖ Global Gateway Filters (Apply to All Routes)
# ================================
spring.cloud.gateway.default-filters:
  # üîÑ Remove duplicate response headers
  - name: DedupeResponseHeader
    args:
      headers: Vary Access-Control-Allow-Origin
      strategy: RETAIN_FIRST
    order: -500

  # ‚è≥ Apply Rate Limiting globally
  - name: RequestRateLimiter
    args:
      key-resolver: '#{@userKeyResolver}' # Use user-based resolver
      redis-rate-limiter.replenishRate: 10 # requests per second
      redis-rate-limiter.burstCapacity: 20 # max burst capacity
      redis-rate-limiter.requestedTokens: 1 # tokens per request

# ================================
# ‚úÖ Gateway Routes per Microservice
# ================================

# -- Product Catalog Service Route
spring.cloud.gateway.routes:
  - id: product-catalog-service-route
    uri: lb://product-catalog-service
    predicates:
      - Path=/products/**
    filters:
      - RewritePath=/products/(?<segment>.*), /${segment}
      - name: CircuitBreaker
        args:
          name: productCatalogCircuitBreaker
          fallbackUri: forward:/fallback/products
      - name: Retry
        args:
          retries: 3
          statuses: BAD_GATEWAY, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT
          methods: GET

# -- Order Processing Service Route
  - id: order-processing-service-route
    uri: lb://order-processing-service
    predicates:
      - Path=/orders/**
    filters:
      - RewritePath=/orders/(?<segment>.*), /${segment}
      - name: CircuitBreaker
        args:
          name: orderProcessingCircuitBreaker
          fallbackUri: forward:/fallback/orders
      - name: Retry
        args:
          retries: 3
          statuses: BAD_GATEWAY, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT
          methods: GET

# -- User Service Route
  - id: user-service-route
    uri: lb://user-service
    predicates:
      - Path=/users/**
    filters:
      - RewritePath=/users/(?<segment>.*), /${segment}
      - name: CircuitBreaker
        args:
          name: userCircuitBreaker
          fallbackUri: forward:/fallback/users
      - name: Retry
        args:
          retries: 3
          statuses: BAD_GATEWAY, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT
          methods: GET

# -- Logistics Sub-route (from logistics-media-service)
  - id: logistics-service-route
    uri: lb://logistics-media-service
    predicates:
      - Path=/logistics/**
    filters:
      - RewritePath=/logistics/(?<segment>.*), /${segment}
      - name: CircuitBreaker
        args:
          name: logisticsCircuitBreaker
          fallbackUri: forward:/fallback/logistics
      - name: Retry
        args:
          retries: 3
          statuses: BAD_GATEWAY, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT
          methods: GET

# -- Media Sub-route (from logistics-media-service)
  - id: media-service-route
    uri: lb://logistics-media-service
    predicates:
      - Path=/media/**
    filters:
      - RewritePath=/media/(?<segment>.*), /${segment}
      - name: CircuitBreaker
        args:
          name: mediaCircuitBreaker
          fallbackUri: forward:/fallback/media
      - name: Retry
        args:
          retries: 3
          statuses: BAD_GATEWAY, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT
          methods: GET

# -- Notification Service Route
  - id: notification-service-route
    uri: lb://notification-service
    predicates:
      - Path=/notifications/**
    filters:
      - RewritePath=/notifications/(?<segment>.*), /${segment}
      - name: CircuitBreaker
        args:
          name: notificationCircuitBreaker
          fallbackUri: forward:/fallback/notifications
      - name: Retry
        args:
          retries: 3
          statuses: BAD_GATEWAY, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT
          methods: GET
