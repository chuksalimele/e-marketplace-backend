## YAML Template.
---
# src/main/resources/application.yml for User Service

server:
  port: 5001 # A unique port for this microservice

truststore:
  path: classpath:backend_truststore.p12
  password: microservicetrustpass@123+@+

spring:
  application:
    name: user-service # The unique name of this service, used by Eureka

  security:
    oauth2:
      resourceserver:
        jwt:
          # This issuer-uri is good for matching the 'iss' claim in the JWT.
          # It also allows Spring to attempt discovery of JWKS via .well-known/openid-configuration if available.
          issuer-uri: https://localhost:8443 # Replace with your Auth Server's actual issuer URI

          # THIS IS CRUCIAL FOR SIGNATURE VERIFICATION.
          # It tells Spring Security where to fetch the public keys (JWKS) to validate the JWT's signature.
          # This should point to the JWK Set endpoint of your Authorization Server.
          jwk-set-uri: https://localhost:8443/realms/chuks-emaketplace-realm/protocol/openid-connect/certs # Example for Keycloak

  # Spring Mail SMTP Configuration (REQUIRED for SmtpEmailSenderService)
  # Replace with your actual SMTP server details. For production, use a dedicated email service.
  mail:
    host: smtp.gmail.com # Example: smtp.sendgrid.net, email-smtp.us-east-1.amazonaws.com
    port: 587 # Standard for TLS. Use 465 for SSL.
    username: your-email@gmail.com # Your email address for sending
    password: YOUR_EMAIL_APP_PASSWORD # IMPORTANT: Use an app password for Gmail, not your main password. For other providers, use the generated SMTP password.
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true # Enable STARTTLS
      mail.smtp.starttls.required: true # Require STARTTLS
    test-connection: true # Test connection on application startup

  # Redis Configuration (REQUIRED for EmailVerificationService for OTP storage)
  # Ensure your Redis instance is running and accessible.
  data:
    redis:
      host: localhost # Your Redis server host
      port: 6379 # Your Redis server port
      password: # Leave empty if no password, or provide your Redis password
      timeout: 5s # Connection timeout
      database: 0 # Redis database index (default is 0)

# Keycloak/Authorization Server Configuration
auth-server:
  url: https://localhost:8443 # Your Authorization Server URL (e.g., Keycloak URL)
  realm: chuks-emaketplace-realm # The realm where your application users reside

  # Configuration for the backend service to call Authorization Server Admin API
  admin:
    url: https://localhost:8443 # Authorization Server Admin URL (e.g., Keycloak Admin URL)
    realm: master # Realm where your admin client (e.g., admin-cli or a custom client for this service) resides
    client-id: admin-cli # The client ID this service will use to get an admin token
    client-secret: YOUR_KEYCLOAK_ADMIN_CLI_SECRET # The secret for the admin-cli or your custom admin client.
                                                  # IMPORTANT: For 'admin-cli', you might need to enable 'Service Accounts Enabled'
                                                  # and get the secret from the 'Credentials' tab.
                                                  # For production, create a dedicated confidential client for this service
                                                  # with 'Service Accounts Enabled' and appropriate realm-management roles.

# Removed redundant Keycloak admin properties for clarity and consolidation:
# admin-cli-client-id: admin-cli
# admin-username: admin
# admin-password: admin
# admin-auth-server-url: https://localhost:8443
# admin-realm: chuks-emaketplace-realm
# admin-service-client-id: user-service-admin-client
# admin-service-client-secret: YOUR_GENERATED_USER_SERVICE_ADMIN_CLIENT_SECRET


eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/ # Pointing to your Eureka Server
  instance:
    hostname: localhost # For local development, use localhost
    prefer-ip-address: true # Optional: Register with IP address instead of hostname (good for containerized envs)

jwt:
  auth:
    converter:
      resource-id: emaketplace-app
      principle-attribute: preferred_username